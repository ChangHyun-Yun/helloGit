<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.2.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- <annotation-driven /> -->
	<mvc:annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- <resources mapping= -->
	<mvc:resources mapping="/resources/**" location="/resources/" />
	<!-- 
	<resources> : location에 대한 요청이 Spring MVC에 영향을 받아 직접 접근이 불가능한 경우
	                           이를 WAS에게 위임하여 url로 resourse에 직접 접근 할 수 있도록 해줌.    
				* : 0 개 이상의 문자와 매칭 
				** : 0 개 이상의 디렉토리와 화일과 매칭 
				mapping="/resources/**" : /resources/ 의 하위 경로로 접근하는 모든 경로와 파일은
				location="/resources/" : /resources/ 디렉토리 에서 찾아라 ~~~ 
	-->

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.ncs.green, service, jdbcUtil" />
	
	<!-- ** Mybatis (DAO 역할을 xml 로 정의)  
		=> JDBC Connection, Mybatis 설정 : Sql 구문 등..   	
		=> Namespaces (jdbc , mybatis 추가) 	--> 
		
	<!-- 1) JDBC Connection  -->
	<beans:bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<beans:property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
		<beans:property name="url" value="jdbc:oracle:thin:@127.0.0.1:1521:orcl"/>
		<beans:property name="username" value="system"/>
		<beans:property name="password" value="oracle"/>
	</beans:bean>
	<!-- 2) Mybatis 설정
	=> SqlSessionFactory -> SqlSessionTemplate 
	2.1) SqlSessionFactory
		- MyBatis 와 연동시  DB 연결과 SQL 실행의 핵심 클래스
		- SqlSessionFactoryBean 에 의해 생성됨
	 -->
	<beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource"/>
		<!-- MyBatis 설정 파일의 위치를 지정  : 스프링 동작시 같이 동작 하도록 -->
		<beans:property name="configLocation" value="classpath:/mybatis-config.xml" />
		<!-- SQL문이 있는 xml파일(mapper) 의 위치를 지정합니다. 
		 	=> mappers 폴더내의 모든 폴더의 *Mapper.xml 을 인식하도록 해줌  --> 
		<beans:property name="mapperLocations" value="classpath:/mappers/**/*Mapper.xml" />
	</beans:bean>
	<!-- 2.2) SqlSessionTemplate
			- DAO 의 DB연결 & Close 기능, 
			- Mapper의 Sql 구문을 이용해 DAO의 요청을 처리
			- sqlSessionFactory 를 생성자로 주입해서 설정  -->
	<beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate"
								destroy-method="clearCache">
		<beans:constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" />						
	</beans:bean>	
	
	<!-- ** ImageUpload: MultipartFile -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="-1" />
	</beans:bean>
	<!-- ** 주의: 대부분의  Resolver 로 끝나는 클래스의 경우에는 이미 정해져 있기 때문에  id 변경 불가능 하다 
		 ** maxUploadSize 는 지정하지 않으면 default 값은 -1 이며 크기 무제한 이 됨. -->
	
	<!-- JsonView -->
	<beans:bean id="jsonView" class="net.sf.json.spring.web.servlet.view.JsonView"/>
	<beans:bean id="viewResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver">
	<beans:property name="order" value="1"></beans:property>
	</beans:bean>
	
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
	*** 스프링 트랜잭션 설정의 특징
	=> XML 기반 적용만 가능
	=> <aop:aspect>는 사용할 수 없고 <aop:advisor> 를 사용해야함
		( 둘은 같은기능 이지만 사용 속성이 다르며 스프링 트랜잭션 관리에 사용되는 어드바이스의 경우
		    우리가 메서드명을 알 수 없기 때문에  <aop:advisor> 를 사용함 )  -->
	
	<!-- 1. 트랜잭션 관리자 클래스 등록  :
		=> PlattformTransactionManager 인터페이스를 구현한 클래스 들
		=> DataSourceTransactionManager : JDBC, Mybatis 모두 지원 
		=> commit, rollback 지원  -->  
		
	<beans:bean id="txManager" 
				class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="dataSource"></beans:property>		
	</beans:bean>	
	
	<!-- 2. => Transaction 관리 Advice 설정  -->
	<!--  => 스프링 컨테이너가 <tx:advice> 설정을 참조하여 자동으로 생성  	 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
	<!-- 어드바이스 txAdvice는 앞서 설정한 txManeger를 이용하여 트랜잭션을 관리 
		  자식 엘리먼트인 <tx:method> 이용하여 트랜잭션 적용메서드를 지정함 -->
		<tx:attributes>
			<tx:method name="sel*" read-only="true"/>
			<tx:method name="*" rollback-for="Exception"/>
			<!-- 'sel' 로 시작되는 모든  메서드는 read_only로 처리되어  
				  트랜잭션 관리 대상에서 제외되며 나머지는 관리대상이 됨    -->
		</tx:attributes>
	</tx:advice>
	
	<!-- 	3. => AOP 설정 
		해당 비즈니스 메서드 실행 후 트랜잭션 관리 어드바이스가 동작 하도록 해줌  -->
	<aop:config>
		<aop:pointcut expression="execution(* com.ncs.green.*.join(..))" id="txPointcut"/>
		<!-- "execution(*리턴타입, 패키지경로.클래스명.매서드명(..))"   
		 	 <aop:pointcut> ~ 어드바이스 메서드가 적용될 비즈니스메서드를 표현식(expression) 으로 지정 --> 
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
	</aop:config>
	
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
	*** Exception 설정 	-->
	<beans:bean id="exceptionResolver" 
				class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<beans:property name="exceptionMappings">
			<beans:props>
			<!-- 스프링 하에서 발생된 Exception 은 Spring 의  Exception 객체를 사용해야 정확하게 인식함  -->
				<beans:prop key="org.springframework.dao.DuplicateKeyException">
					errorPage/dupExceptionMessage</beans:prop>
				<beans:prop key="org.springframework.jdbc.UncategorizedSQLException">
					errorPage/sqlexceptionMessage</beans:prop>
				<beans:prop key="java.lang.IllegalArgumentException">
					errorPage/ilexceptionMessage</beans:prop>	
				<beans:prop key="java.lang.ArithmeticException">
					errorPage/arexceptionMessage</beans:prop>
				<beans:prop key="java.lang.NullPointerException">
					errorPage/npException</beans:prop>
			</beans:props>
		</beans:property>
		<beans:property name="defaultErrorView" 
						value="errorPage/exceptionMessage" />
	</beans:bean>
	
</beans:beans>
